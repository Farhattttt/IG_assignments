Simple Queries:

-- Problem 1

SELECT MEMBER_ID, MEMBER_NAME, CITY, MEMBERSHIP_STATUS
FROM LMS_MEMBERS
WHERE MEMBERSHIP_STATUS = 'Permanent';

-- Problem 2

SELECT BOOK_CODE, PUBLICATION, PRICE, SUPPLIER_ID
FROM LMS_BOOK_DETAILS
WHERE BOOK_CODE = (
    SELECT BOOK_CODE
    FROM LMS_BOOK_ISSUE
    GROUP BY BOOK_CODE
    ORDER BY COUNT(*) DESC
    LIMIT 1
);

-- Problem 3

SELECT MEMBER_ID, MEMBER_NAME
FROM LMS_MEMBERS
WHERE MEMBER_ID IN (
    SELECT MEMBER_ID
    FROM LMS_BOOK_ISSUE
    WHERE BOOK_CODE = 'BL000002'
);

-- Problem 4

SELECT BOOK_CODE, BOOK_TITLE, AUTHOR
FROM LMS_BOOK_DETAILS
WHERE AUTHOR LIKE 'P%';

-- Problem 5

SELECT COUNT(*) AS NO_OF_BOOKS
FROM LMS_BOOK_DETAILS
WHERE CATEGORY = 'JAVA';

-- Problem 6

SELECT CATEGORY, COUNT(*) AS NO_OF_BOOKS
FROM LMS_BOOK_DETAILS
GROUP BY CATEGORY;

-- Problem 7

SELECT COUNT(*) AS NO_OF_BOOKS
FROM LMS_BOOK_DETAILS
WHERE PUBLICATION = 'Prentice Hall';

-- Problem 8

SELECT BOOK_CODE, 
       (SELECT BOOK_TITLE 
        FROM LMS_BOOK_DETAILS 
        WHERE BOOK_CODE = LMS_BOOK_ISSUE.BOOK_CODE) AS BOOK_TITLE
FROM LMS_BOOK_ISSUE
WHERE DATE_ISSUE = '2012-04-01';

-- Problem 9

SELECT MEMBER_ID, MEMBER_NAME, DATE_REGISTER, DATE_EXPIRE
FROM LMS_MEMBERS
WHERE DATE_EXPIRE < '2013-04-01';

-- Problem 10

SELECT MEMBER_ID, MEMBER_NAME, DATE_REGISTER, MEMBERSHIP_STATUS
FROM LMS_MEMBERS
WHERE DATE_REGISTER < '2012-03-01' AND MEMBERSHIP_STATUS = 'Temporary';

-- Problem 11

SELECT MEMBER_ID, 
       CONCAT(UPPER(SUBSTRING(MEMBER_NAME, 1, 1)), LOWER(SUBSTRING(MEMBER_NAME, 2))) AS Name
FROM LMS_MEMBERS
WHERE CITY IN ('CHENNAI', 'DELHI');

-- Problem 12

SELECT DISTINCT CONCAT(BOOK_TITLE, '_is_written_by_', AUTHOR) AS BOOK_WRITTEN_BY
FROM LMS_BOOK_DETAILS;

-- Problem 13

SELECT AVG(PRICE) AS AVERAGEPRICE
FROM LMS_BOOK_DETAILS
WHERE CATEGORY = 'JAVA';

-- Problem 14

SELECT SUPPLIER_ID, SUPPLIER_NAME, EMAIL
FROM LMS_SUPPLIERS_DETAILS
WHERE EMAIL LIKE '%@gmail.com';

-- Problem 15

SELECT SUPPLIER_ID, SUPPLIER_NAME, COALESCE(CONTACT, EMAIL, ADDRESS) AS CONTACTDETAILS
FROM LMS_SUPPLIERS_DETAILS;

-- Problem 16

SELECT SUPPLIER_ID, SUPPLIER_NAME, 
       CASE WHEN IFNULL(CONTACT, 0) = 0 THEN 'No' ELSE 'Yes' END AS PHONENUMAVAILABLE
FROM LMS_SUPPLIERS_DETAILS;

-- Problem 17

SELECT MEMBER_ID, 
       MEMBER_NAME, 
       CITY, 
       MEMBERSHIP_STATUS, 
       (SELECT SUM(F.FINE_AMOUNT) 
        FROM LMS_BOOK_ISSUE B 
        JOIN LMS_FINE_DETAILS F ON B.FINE_RANGE = F.FINE_RANGE
        WHERE B.MEMBER_ID = LMS_MEMBERS.MEMBER_ID) AS Fine
FROM LMS_MEMBERS;

Average Queries:

-- Problem 1

SELECT B.MEMBER_ID, M.MEMBER_NAME, B.BOOK_CODE, 
       (SELECT BOOK_TITLE FROM LMS_BOOK_DETAILS WHERE BOOK_CODE = B.BOOK_CODE) AS BOOK_TITLE
FROM LMS_BOOK_ISSUE B, LMS_MEMBERS M
WHERE B.MEMBER_ID = M.MEMBER_ID;

-- Problem 2

SELECT COUNT(*) AS NO_OF_BOOKS_AVAILABLE
FROM LMS_BOOK_DETAILS
WHERE BOOK_CODE NOT IN (SELECT BOOK_CODE FROM LMS_BOOK_ISSUE);

-- Problem 3

SELECT B.MEMBER_ID, M.MEMBER_NAME, B.FINE_RANGE, 
       (SELECT FINE_AMOUNT FROM LMS_FINE_DETAILS WHERE FINE_RANGE = B.FINE_RANGE) AS FINE_AMOUNT
FROM LMS_BOOK_ISSUE B, LMS_MEMBERS M
WHERE B.MEMBER_ID = M.MEMBER_ID
  AND (SELECT FINE_AMOUNT FROM LMS_FINE_DETAILS WHERE FINE_RANGE = B.FINE_RANGE) < 100;

-- Problem 4

SELECT BOOK_CODE, BOOK_TITLE, PUBLICATION, BOOK_EDITION, PRICE, YEAR(PUBLISH_DATE) AS YEAR_OF_PUBLICATION
FROM LMS_BOOK_DETAILS
ORDER BY YEAR(PUBLISH_DATE), PUBLICATION, BOOK_EDITION;

-- Problem 5

SELECT BOOK_CODE, BOOK_TITLE, RACK_NUM
FROM LMS_BOOK_DETAILS
WHERE RACK_NUM = 'A1'
ORDER BY BOOK_TITLE ASC;

-- Problem 6

SELECT B.MEMBER_ID, M.MEMBER_NAME, B.DATE_ISSUE, B.DATE_RETURN, B.DATE_RETURNED
FROM LMS_BOOK_ISSUE B, LMS_MEMBERS M
WHERE B.MEMBER_ID = M.MEMBER_ID
  AND B.DATE_RETURNED > B.DATE_RETURN;

-- Problem 7

SELECT M.MEMBER_ID, M.MEMBER_NAME, M.DATE_REGISTER
FROM LMS_MEMBERS M
WHERE M.MEMBER_ID NOT IN (SELECT MEMBER_ID FROM LMS_BOOK_ISSUE);

-- Problem 8

SELECT M.MEMBER_ID, M.MEMBER_NAME
FROM LMS_MEMBERS M
WHERE M.MEMBER_ID NOT IN (
    SELECT MEMBER_ID 
    FROM LMS_BOOK_ISSUE B
    WHERE B.DATE_ISSUE BETWEEN '2012-01-01' AND '2012-12-31' 
      AND B.FINE_RANGE IS NOT NULL
);

-- Problem 9

SELECT DATE_ISSUE, COUNT(*) AS NOOFBOOKS
FROM LMS_BOOK_ISSUE
GROUP BY DATE_ISSUE
ORDER BY NOOFBOOKS DESC
LIMIT 1;

-- Problem 10

SELECT BOOK_TITLE, SUPPLIER_ID
FROM LMS_BOOK_DETAILS
WHERE AUTHOR = 'Herbert Schildt' 
  AND BOOK_EDITION = 5 
  AND SUPPLIER_ID = 'S01';

-- Problem 11

SELECT RACK_NUM, COUNT(*) AS NOOFBOOKS
FROM LMS_BOOK_DETAILS
GROUP BY RACK_NUM
ORDER BY RACK_NUM ASC;

-- Problem 12

SELECT B.BOOK_ISSUE_NO, M.MEMBER_NAME, M.DATE_REGISTER, M.DATE_EXPIRE, 
       BD.BOOK_TITLE, BD.CATEGORY, BD.AUTHOR, BD.PRICE, 
       B.DATE_ISSUE, B.DATE_RETURN, B.DATE_RETURNED, 
       CASE WHEN B.DATE_RETURNED > B.DATE_RETURN THEN 'Late' ELSE 'On Time' END AS ISSUE_STATUS, 
       (SELECT F.FINE_AMOUNT FROM LMS_FINE_DETAILS F WHERE F.FINE_RANGE = B.FINE_RANGE) AS FINE_AMOUNT
FROM LMS_BOOK_ISSUE B, LMS_MEMBERS M, LMS_BOOK_DETAILS BD
WHERE B.MEMBER_ID = M.MEMBER_ID
  AND B.BOOK_CODE = BD.BOOK_CODE;

-- Problem 13

SELECT BOOK_CODE, BOOK_TITLE, PUBLISH_DATE
FROM LMS_BOOK_DETAILS
WHERE MONTH(PUBLISH_DATE) = 12;

-- Problem 14

SELECT BOOK_CODE, BOOK_TITLE, SUPPLIER_ID, PRICE
FROM LMS_BOOK_DETAILS BD
WHERE (SUPPLIER_ID, PRICE) IN (
    SELECT SUPPLIER_ID, MAX(PRICE)
    FROM LMS_BOOK_DETAILS
    GROUP BY SUPPLIER_ID
);

-- Problem 15

SELECT BOOK_CODE, BOOK_TITLE, PUBLICATION, 
       TIMESTAMPDIFF(YEAR, PUBLISH_DATE, CURDATE()) AS BOOK_AGE
FROM LMS_BOOK_DETAILS
ORDER BY BOOK_AGE DESC;

-- COMPLEX QUERIES

-- Problem 1

SELECT BD.BOOK_CODE, BD.BOOK_TITLE, SD.SUPPLIER_NAME
FROM LMS_BOOK_DETAILS BD
JOIN LMS_SUPPLIERS_DETAILS SD ON BD.SUPPLIER_ID = SD.SUPPLIER_ID
WHERE BD.SUPPLIER_ID = (
    SELECT SUPPLIER_ID
    FROM LMS_BOOK_DETAILS
    GROUP BY SUPPLIER_ID
    ORDER BY COUNT(*) DESC
    LIMIT 1
);

-- Problem 2

SELECT 
    M.MEMBER_ID, 
    M.MEMBER_NAME, 
    (3 - COUNT(BI.BOOK_ISSUE_NO)) AS REMAININGBOOKS
FROM 
    LMS_MEMBERS M
LEFT JOIN 
    LMS_BOOK_ISSUE BI ON M.MEMBER_ID = BI.MEMBER_ID
GROUP BY 
    M.MEMBER_ID, M.MEMBER_NAME;

-- Problem 3

SELECT SD.SUPPLIER_ID, SD.SUPPLIER_NAME
FROM LMS_SUPPLIERS_DETAILS SD
WHERE SD.SUPPLIER_ID = (
    SELECT SUPPLIER_ID
    FROM LMS_BOOK_DETAILS
    GROUP BY SUPPLIER_ID
    ORDER BY COUNT(*) ASC
    LIMIT 1
);




